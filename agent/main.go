package main

import (
	"flag"
	"log"
	"os"
	"time"

	"redborder/malware-agent/client"
)

// Options stores the configuration of the application
type Options struct {
	url       string
	whitelist bool
	minScore  float64
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	opts := getopts()

	apiClient := client.NewApiClient(opts.url, nil)

	release, err := client.NewRelease(opts.minScore, opts.whitelist, &apiClient)
	if err != nil {
		log.Fatal(err)
	}

	err = release.Init()
	if err != nil {
		log.Fatal(err)
	}

	release.Dump()
	//notify()

	select {
	case <-time.After(10 * time.Second):
		release.Update()
		release.Dump()
	}

	// for {
	// 	select {
	// 	case <-time.After(10 * time.Second):
	// 		release.Update()
	// 		release.Dump()
	// 		notify()
	// 	}
	// }
}

// getopts parses arguments from stdout into a Options struct
func getopts() Options {

	var opts Options

	urlFlag := flag.String("url", "", "API url")
	minScoreFlag := flag.Float64("min_score", 50, "Min score to add to the blacklist")
	whitelistFlag := flag.Bool("whitelist", false, "File to add entries with score < min_score")

	flag.Parse()

	if len(*urlFlag) == 0 {
		flag.Usage()
		os.Exit(1)
	}

	opts.minScore = *minScoreFlag
	opts.whitelist = *whitelistFlag

	opts.url = *urlFlag
	return opts
}

// notify sends a notification to Snort using UNIX sockets
func notify() {

}
