package main

import (
	"flag"
	"log"
	"os"
	"time"

	"redborder/malware-agent/client"
)

// Options stores the configuration of the application
var (
	url            string
	whitelist      bool
	minScore       float64
	updateInterval int
)

// Used for parsing params
func init() {
	urlFlag := flag.String("url", "", "API url")
	minScoreFlag := flag.Float64("min_score", 50, "Min score to add to the blacklist")
	whitelistFlag := flag.Bool("whitelist", false, "File to add entries with score < min_score")
	updateIntervalFlag := flag.Int("interval", 300, "Interval in seconds between updates")

	flag.Parse()

	if len(*urlFlag) == 0 {
		flag.Usage()
		os.Exit(1)
	}

	minScore = *minScoreFlag
	whitelist = *whitelistFlag
	updateInterval = *updateIntervalFlag
	url = *urlFlag
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	apiClient := client.NewApiClient(url)
	release := client.NewRelease(minScore, whitelist, apiClient)

	if err := release.Init(); err != nil {
		log.Fatal(err)
	}

	release.Dump()

	for {
		select {
		case <-time.After(time.Duration(updateInterval) * time.Second):
			release.Update()
			release.Dump()
		}
	}
}

// notify sends a notification to Snort using UNIX sockets
func notify() {
	// TODO
}
