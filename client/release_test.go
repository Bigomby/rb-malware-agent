package client

import (
	"bufio"
	"bytes"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"io"
	"os"
	"testing"
)

type ClosingBuffer struct {
	*bytes.Buffer
}

func (cb *ClosingBuffer) Close() (err error) {
	return
}

type MockApiClient struct {
	mock.Mock
}

func (m *MockApiClient) GetCurrentRelease() (revision, incremental int, err error) {
	args := m.Mock.Called()
	return args.Int(0), args.Int(1), args.Error(2)
}

func (m *MockApiClient) GetTotal() (body io.ReadCloser, err error) {
	args := m.Mock.Called()
	return args.Get(0).(io.ReadCloser), args.Error(1)
}

func (m *MockApiClient) GetIncremental(revision, incremental int) (body io.ReadCloser, err error) {
	args := m.Mock.Called()
	return args.Get(0).(io.ReadCloser), args.Error(1)
}

func Test_Init_OnlyTotal(t *testing.T) {

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(`
	   {
	     "data": [{
	       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
	       "score": 25,
	       "uploaded": false
	     }, {
	       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
	       "score": 85,
	       "uploaded": false
	     }, {
	       "score": 0,
	       "ip": "222.161.187.107"
	     }, {
	       "score": 50,
	       "ip": "104.219.238.81"
	     }, {
	       "score": 80,
	       "ip": "151.80.200.230"
	     }],
	     "last_release": "2.0"
	   }
	   `),
	}
	defer rcTotal.Close()

	m := &MockApiClient{}
	m.On("GetTotal").Return(rcTotal, nil)

	r := NewRelease(50, true, m)
	r.Init()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	assert.Equal(t, 1, len(r.hashBlacklist))
	assert.Equal(t, 2, len(r.ipBlacklist))

	assert.Equal(t, 85.0, r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 50.0, r.ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80.0, r.ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 1, len(r.hashWhitelist))
	assert.Equal(t, 1, len(r.ipWhitelist))

	assert.Equal(t, 25.0, r.hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 0.0, r.ipWhitelist["222.161.187.107"], "Wrong IP score")
}

func Test_Init_WithIncremental(t *testing.T) {

	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockApiClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)

	r := NewRelease(50, true, m)
	r.Init()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 1, r.Incremental, "Wrong incremental")

	assert.Equal(t, 2, len(r.hashBlacklist))
	assert.Equal(t, 2, len(r.ipBlacklist))

	assert.Equal(t, 85.0, r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75.0, r.hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50.0, r.ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80.0, r.ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 1, len(r.hashWhitelist))
	assert.Equal(t, 1, len(r.ipWhitelist))

	assert.Equal(t, 0.0, r.hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15.0, r.ipWhitelist["151.80.200.230"], "Wrong IP score")
}

func Test_Update_Incremental(t *testing.T) {

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.2"
   }
   `

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockApiClient{}
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(2, 2, nil)

	r := NewRelease(50, true, m)

	r.Revision = 2
	r.Incremental = 0

	r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"] = 85

	r.ipBlacklist["151.80.200.230"] = 80
	r.ipBlacklist["104.219.238.81"] = 50

	r.hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"] = 25

	r.ipWhitelist["222.161.187.107"] = 0

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 2, r.Incremental, "Wrong incremental")

	assert.Equal(t, 2, len(r.hashBlacklist))
	assert.Equal(t, 2, len(r.ipBlacklist))

	assert.Equal(t, 85.0, r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75.0, r.hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50.0, r.ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80.0, r.ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 1, len(r.hashWhitelist))
	assert.Equal(t, 1, len(r.ipWhitelist))

	assert.Equal(t, 0.0, r.hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15.0, r.ipWhitelist["151.80.200.230"], "Wrong IP score")
}

func Test_Update_Revision(t *testing.T) {

	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockApiClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(50, true, m)

	r.Revision = 2
	r.Incremental = 3

	r.Update()

	assert.Equal(t, 3, r.Revision, "Wrong revision")
	assert.Equal(t, 1, r.Incremental, "Wrong incremental")

	assert.Equal(t, 2, len(r.hashBlacklist))
	assert.Equal(t, 2, len(r.ipBlacklist))

	assert.Equal(t, 85.0, r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75.0, r.hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50.0, r.ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80.0, r.ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 1, len(r.hashWhitelist))
	assert.Equal(t, 1, len(r.ipWhitelist))

	assert.Equal(t, 0.0, r.hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15.0, r.ipWhitelist["151.80.200.230"], "Wrong IP score")
}

func Test_Dump(t *testing.T) {

	r := NewRelease(50, true, nil)

	r.Revision = 2
	r.Incremental = 0

	r.hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"] = 85

	r.ipBlacklist["151.80.200.230"] = 80
	r.ipBlacklist["104.219.238.81"] = 50

	r.hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"] = 25

	r.ipWhitelist["222.161.187.107"] = 0

	r.Dump()

	hashBlacklistFile, err := os.Open("hashes_blacklist")
	if err != nil {
		t.Error(err)
	}
	defer hashBlacklistFile.Close()

	ipBlacklistFile, err := os.Open("ips_blacklist")
	if err != nil {
		t.Error(err)
	}
	defer ipBlacklistFile.Close()

	hashWhitelistFile, err := os.Open("hashes_whitelist")
	if err != nil {
		t.Error(err)
	}
	defer hashWhitelistFile.Close()

	ipWhitelistFile, err := os.Open("ips_whitelist")
	if err != nil {
		t.Error(err)
	}
	defer ipWhitelistFile.Close()

	var scanner *bufio.Scanner
	var found int
	var entries int

	scanner = bufio.NewScanner(hashBlacklistFile)
	for scanner.Scan() {
		if scanner.Text() == "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing hashes")
	assert.Equal(t, 1, entries, "Unknow hashes on file")
	os.Remove("hashes_blacklist")

	found = 0
	entries = 0
	scanner = bufio.NewScanner(ipBlacklistFile)
	for scanner.Scan() {
		if scanner.Text() == "104.219.238.81" {
			found++
		}
		if scanner.Text() == "151.80.200.230" {
			found++
		}
		entries++
	}
	assert.Equal(t, 2, found, "Missing IPs")
	assert.Equal(t, 2, entries, "Unknow IPs on file")
	os.Remove("ips_blacklist")

	found = 0
	entries = 0
	scanner = bufio.NewScanner(hashWhitelistFile)
	for scanner.Scan() {
		if scanner.Text() == "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing hashes")
	assert.Equal(t, 1, entries, "Unknow hashes on file")
	os.Remove("hashes_whitelist")

	found = 0
	entries = 0
	scanner = bufio.NewScanner(ipWhitelistFile)
	for scanner.Scan() {
		if scanner.Text() == "222.161.187.107" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing IPs")
	assert.Equal(t, 1, entries, "Unknow IPs on file")
	os.Remove("ips_whitelist")
}
