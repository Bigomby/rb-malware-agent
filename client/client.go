package client

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strconv"
	"strings"
)

// ApiClient stores information of the API
type ApiClient struct {
	Url        string
	HTTPClient *http.Client
}

// NewApiClient creates a new client for the given URL.
func NewApiClient(url string, httpClient ...*http.Client) ApiClient {

	apiClient := ApiClient{
		Url: url,
	}

	if len(httpClient) == 0 {
		apiClient.HTTPClient = &http.Client{}
	} else {
		apiClient.HTTPClient = httpClient[0]
	}

	return apiClient
}

// GetCurrentVersion obtais the current version from the API
func (apiClient ApiClient) GetCurrentRelease() (revision, incremental int, err error) {

	var jsonResp map[string]string

	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/incremental")
	if err != nil {
		return
	}
	defer res.Body.Close()

	if res.StatusCode >= 400 {
		err = errors.New(res.Status)
		return
	}

	decoder := json.NewDecoder(res.Body)
	err = decoder.Decode(&jsonResp)
	if err != nil {
		return
	}

	version := strings.Split(jsonResp["last_release"], ".")

	revision, err = strconv.Atoi(version[0])
	incremental, err = strconv.Atoi(version[1])

	return
}

// requestTotal requests the API for the latest revision returns the current revision and
// incremental
func (apiClient ApiClient) GetTotal() (body io.ReadCloser, err error) {

	// Perform request and read body
	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/total")
	if err != nil {
		return
	}

	body = res.Body

	if res.Status != "200 OK" {
		err = errors.New(res.Status)
		return
	}

	return
}

// requestIncremental requests the API for the latest incrementa
func (apiClient ApiClient) GetIncremental(revision, incremental int) (body io.ReadCloser, err error) {

	// Perform request and read body
	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/incremental/" +
		strconv.Itoa(revision) + "." + strconv.Itoa(incremental))
	if err != nil {
		return
	}

	body = res.Body

	if res.Status != "200 OK" {
		err = errors.New(res.Status)
	}

	return
}
