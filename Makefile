MKL_RED?=	\033[031m
MKL_GREEN?=	\033[032m
MKL_YELLOW?=	\033[033m
MKL_BLUE?=	\033[034m
MKL_CLR_RESET?=	\033[0m

BIN=						rb_malware_agent
PROJECT=				github.com/redBorder/rb-malware-agent
SNORT_CONTROL=	rb_snort_control
prefix?=				/usr/local
bindir?=				$(prefix)/bin
novendor?=			$(shell glide novendor)

build: rb_malware_agent rb_snort_control

rb_malware_agent:
	@printf "$(MKL_YELLOW)Building $(BIN)$(MKL_CLR_RESET)\n"
	go build -ldflags "-X main.version=`git describe --tags --always`" -o $(BIN) ./cmd/app/

rb_snort_control:
	@printf "$(MKL_YELLOW)Building $(SNORT_CONTROL)$(MKL_CLR_RESET)\n"
	go build -o $(SNORT_CONTROL) ./cmd/snort-control/main.go

clean:
	rm -f $(BIN) $(SNORT_CONTROL)

install:
	@printf "$(MKL_YELLOW)Install $(BIN) to $(bindir)$(MKL_CLR_RESET)\n"
	install $(BIN) $(bindir)

uninstall:
	@printf "$(MKL_RED)Uninstall $(BIN) from $(bindir)$(MKL_CLR_RESET)\n"
	rm -f $(prefix)/$(BIN)

get:
	@printf "$(MKL_YELLOW)Installing deps$(MKL_CLR_RESET)\n"
	go get github.com/Masterminds/glide
	glide install

fmt:
	@if [ -n "$$(go fmt ./...)" ]; then echo 'Please run go fmt on your code.' && exit 1; fi

errcheck:
	@printf "$(MKL_YELLOW)Checking errors$(MKL_CLR_RESET)\n"
	errcheck -ignoretests -verbose ./...

vet:
	@printf "$(MKL_YELLOW)Runing go vet$(MKL_CLR_RESET)\n"
	go vet ./...

test:
	@printf "$(MKL_YELLOW)Runing tests$(MKL_CLR_RESET)\n"
	go test $(novendor)
	@printf "$(MKL_GREEN)Test passed$(MKL_CLR_RESET)\n"

coverage:
	@printf "$(MKL_YELLOW)Computing coverage$(MKL_CLR_RESET)\n"
	@overalls -covermode=set -project=$(PROJECT)
	@go tool cover -func overalls.coverprofile
	@goveralls -coverprofile=overalls.coverprofile -service=travis-ci
